{"version":3,"file":"static/js/928.5b7c018c.chunk.js","mappings":"gQAcIA,EAAKC,EAAAA,GAAAA,IAAH,2CAIFC,EAAKD,EAAAA,GAAAA,GAAH,+DAES,SAAAE,GAAK,OAAIA,EAAMC,gBAiI5B,SAASC,EAAWF,GAOhB,OALFG,EAAAA,EAAAA,YAAU,WACNH,EAAMI,gCAAM,MAIG,IAAdJ,EAAMK,KACE,yDACe,IAAdL,EAAMK,KACP,yDACe,IAAdL,EAAMK,KACP,8DADF,EAKb,SAASC,EAAKN,GACV,OACI,2CAASA,EAAMO,aAAG,MAc1B,OAAeC,EAAAA,EAAAA,KAVf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHA,MAAQA,EAAMG,QACdC,UAAYJ,EAAMK,YAMxB,EArJF,SAAgBd,GAEZ,OAAuBe,EAAAA,EAAAA,WAAS,GAAhC,eAAKC,EAAL,KAAYC,EAAZ,KAKA,IAHSC,EAAAA,EAAAA,YAAWC,EAAAA,IAGAJ,EAAAA,EAAAA,UAAS,IAA7B,eAAKV,EAAL,KAAUe,EAAV,KACA,GAAmBL,EAAAA,EAAAA,WAAS,GAA5B,eAAKM,EAAL,KAAUjB,EAAV,MAQAD,EAAAA,EAAAA,YAAU,WACNmB,YAAW,WACTL,GAAQ,KAAS,OACrB,IAEF,IAAMM,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAOzB,EAAM0B,MAAMC,MAAK,SAASC,GACjC,OAAOA,EAAGL,IAAMA,KAShBM,GAAUC,EAAAA,EAAAA,MAEd,OACA,iBAAKC,UAAU,YAAf,WACK,SAAC,EAAD,WACD,SAAC,EAAD,CAAIA,UAAY,MAAhB,sBASEf,GAAQ,gBAAKe,UAAU,YAAf,UACL,4GACK,MAIV,iBAAKA,UAAU,MAAf,WACC,gBAAKA,UAAU,WAAf,UACD,gBAAKC,IAAI,iDAAiDC,MAAM,YAElE,iBAAKF,UAAU,gBAAf,WACE,eAAIA,UAAU,OAAd,SAAsBN,EAAKS,SAC3B,uBAAIT,EAAKU,WACT,yBAAIV,EAAKW,MAAT,aAEC,SAAC9B,EAAD,CAAM,eAAIN,EAAMO,gBAGjB,mBAAQwB,UAAU,iBAAiBM,QAAS,WAKxCrC,EAAMsC,SAAS,CAACC,KAAO,2BAAQC,QAAU,CAACjB,GAAGE,EAAKF,GAAIkB,KAAKhB,EAAKS,MAAOQ,KAAO,KAG9Eb,EAAQc,KAAK,UARjB,uCAYA,mBAAQZ,UAAU,iBAAiBM,QAAS,WACxCR,EAAQe,UADZ,6CAWA,UAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,iBAAiB,SAArC,WACC,SAACF,EAAA,OAAD,WACD,SAACA,EAAA,OAAD,CAAUG,SAAS,SAASX,QAAS,WAAMjC,GAAM,GAAQgB,EAAO,IAAhE,oCAEC,SAACyB,EAAA,OAAD,WACE,SAACA,EAAA,OAAD,CAAUG,SAAS,SAASX,QAAS,WAAMjC,GAAM,GAAQgB,EAAO,IAAhE,0CAEF,SAACyB,EAAA,OAAD,WACE,SAACA,EAAA,OAAD,CAAUG,SAAS,SAASX,QAAS,WAAMjC,GAAM,GAAQgB,EAAO,IAAhE,6CAWF,SAAC6B,EAAA,EAAD,CAAeC,GAAI7B,EAAK8B,WAAW,QAAQC,QAAS,IAApD,UAGC,SAAClD,EAAD,CAAYG,IAAKA,EAAK,iCAAOD","sources":["Detail.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {React, useContext, useEffect, useState} from \"react\"\r\nimport { useCol } from \"react-bootstrap/esm/Col\";\r\nimport { useHistory, useParams } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport styled from \"styled-components\";\r\nimport './Detail.scss';\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\n// useContext 사용하기 위해 App.js에서 가져오기\r\nimport {재고context} from './App.js';\r\n\r\nlet 박스 = styled.div`\r\n    padding: 20px\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n    font-size: 25px;\r\n    color : ${ props => props.색상 }\r\n`;\r\n// CSS를 미리 입혀놓은 컴포넌트 생성해서 CSS스타일링하기! (styled-components) 물론 취향차이로 사용ㅇ\r\n\r\n// '최근 본 항목' 코드 짜보기\r\n// 1. 누가 Detail페이지 들어가면\r\n// 2 localStorage에 있는 항목을 꺼낸다!\r\n// 3. 경우가 두 가지(방문한 항목이 없을 경우(null), 항목[]이 있는 경우)\r\n// 4. []가 나오면 여기에 URL파라미터의 id부분을 push()하기(추가하기) /detail/0에 접속하면 [0,1,2] 여기에 push(0)하는 것처럼\r\n// 5. 중복 처리하기(4. array에 0이 있으면 처리하지 마세요!! Tip.Set자료형)\r\n// 6. []를 다시 localStorage에 저장함(JSON형식으로)\r\n\r\nfunction Detail(props) {\r\n\r\n    let [alert, alert변경] = useState(true);\r\n    // let [inputData, inputData변경] = useState('');\r\n    let 재고 = useContext(재고context);\r\n\r\n    // 몇 번째 버튼을 눌렀는지 저장할 state 만들기(tab 기능)\r\n    let [tab, setTab] = useState(0);\r\n    let [스위치, 스위치클릭] = useState(false);\r\n\r\n\r\n    // 컴포넌트 로드 시 ajax로 데이터 가져오고 싶을 때!\r\n    // useEffect(()=> {\r\n    //     axios.get()\r\n    // })\r\n\r\n    useEffect(()=> {\r\n        setTimeout(()=>{\r\n          alert변경(false)}, 2000);\r\n    },[]);\r\n\r\n    let { id } = useParams();\r\n    let 상품상세 = props.shoes.find(function(상품){\r\n        return 상품.id == id\r\n    });\r\n    // 1. find()는 array 뒤에 붙일 수 있으며, 안에 콜백함수가 들어감\r\n    // 2. 콜백함수 내의 파라미터는 (상품이라고 적어 놓은 거) array 안에 있던 하나하나의 데이터를 의미\r\n    // 3. return 오른쪽엔 조건식을 적을 수 있습니다. 이게 참인 데이터만 새로운 변수에 저장해줍니다.\r\n    // 4. 조건식엔 그리고 그걸 현재 URL의 /:id에 적힌 값과 상품의 영구번호 (상품.id)가 같은지 비교하고 있는 겁니다.\r\n    // 근데 어차피 Ajax로 요청해서 받아옴~!!!\r\n\r\n\r\n    let history = useHistory(); //방문기록 담은 오브젝트(말그대로 히스토리)\r\n\r\n    return(\r\n    <div className=\"container\">\r\n         <박스>\r\n        <제목 className = \"red\">Detail</제목>\r\n         </박스>\r\n\r\n        {/* {inputData}\r\n         <input onChange={(e)=>{\r\n             inputData변경(e.target.value)\r\n         }}/>  \r\n         update 확인용!!*/}\r\n         \r\n         {alert ? <div className=\"my-alert2\">\r\n             <p>재고가 얼마 남지 않았습니다!!!</p>\r\n         </div> : null }\r\n         \r\n         {/* ↑ style-component를 사용해본 곳.,. */}\r\n\r\n        <div className=\"row\">\r\n         <div className=\"col-md-6\">\r\n        <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n      </div>\r\n      <div className=\"col-md-6 mt-4\">\r\n        <h4 className=\"pt-5\">{상품상세.title}</h4>\r\n        <p>{상품상세.content}</p>\r\n        <p>{상품상세.price}원</p>\r\n\r\n         <Info 재고={props.재고}></Info>\r\n\r\n         {/* 주문하기 버튼 누를때 재고-1 하기 */}\r\n        <button className=\"btn btn-danger\" onClick={()=> {\r\n            // 재고변경 각각으로 수정하기\r\n            // props.재고변경([9,10,11])\r\n\r\n            //※ 이건 하드코딩 버전... 상품에 따른 데이터가 입력되게 하기, 같은 상품이 이미 있으면 수량만 증가시키는 기능\r\n            props.dispatch({type : '항목추가', payload : {id:상품상세.id, name:상품상세.title, quan : 1}});\r\n          \r\n            //페이지 이동시 강제 새로고침 되어서 데이터가 사라질 시 useHistory Hook사용\r\n            history.push('/cart');\r\n\r\n        }}>주문하기</button> \r\n\r\n        <button className=\"btn btn-danger\" onClick={()=>{\r\n            history.goBack();\r\n            // history.push('/') 이 경로로 이동시켜주세요! 하면 이동시켜줌\r\n        }}>뒤로가기</button> \r\n      </div>\r\n    </div>\r\n\r\n    {/* tab기능 만들기\r\n         1.UI상태를 true/false state로 저장\r\n         2.state에 따라 UI 보이고 안 보이고 설정! */}\r\n        \r\n        <Nav variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n         <Nav.Item>\r\n        <Nav.Link eventKey=\"link-0\" onClick={()=>{ 스위치클릭(false); setTab(0) }}>기본 탭</Nav.Link>\r\n         </Nav.Item>\r\n         <Nav.Item>\r\n           <Nav.Link eventKey=\"link-1\" onClick={()=>{ 스위치클릭(false); setTab(1) }}>첫번째 탭</Nav.Link>\r\n         </Nav.Item>\r\n         <Nav.Item>\r\n           <Nav.Link eventKey=\"link-2\" onClick={()=>{ 스위치클릭(false); setTab(2) }}>두번째 탭</Nav.Link>\r\n         </Nav.Item>\r\n        </Nav>\r\n\r\n\r\n         {/* CSSTransition은 yarn add react-transition-group 설치해서 사용하는 애니메이션 라이브러리 */}\r\n         {/* 애니메이션 효과를 적용하고 싶은 곳 감싸기 */}\r\n\r\n         {/* in, classNames, timeout속성 넣기 */}\r\n         {/* in은 애니메이션 키는 스위치! true면 동작! 이것 또한 변수나 state로 저장해서 사용해야됨 */}\r\n         {/* classNames을 css로 데려가서 애니메이션 만들기 */}\r\n         <CSSTransition in={스위치} classNames=\"hello\" timeout={500}>\r\n\r\n         {/* Detail 컴포넌트에 tab State가 있기 때문에 props 전송해주기 */}\r\n          <TabContent tab={tab} 스위치클릭={스위치클릭}/>\r\n         \r\n         </CSSTransition>\r\n\r\n    </div>\r\n     )\r\n  }\r\n  \r\n  function TabContent(props) {\r\n\r\n    useEffect(()=> {\r\n        props.스위치클릭(true);\r\n    })\r\n         \r\n    // 두개의 조건이 있을 때 삼항 연산자보단 if문으로 사용하기\r\n      if(props.tab === 0) {\r\n          return <div>0번째 내용!</div>\r\n        } else if(props.tab === 1) {\r\n          return <div>1번째 내용!</div>\r\n        } else if(props.tab === 2) {\r\n          return <div>2번째 내용!</div>\r\n      }\r\n  }\r\n\r\n  function Info(props) {\r\n      return(\r\n          <p>재고 : {props.재고[0]}</p>\r\n      )\r\n  }\r\n\r\n  function hamsu(state) {\r\n    console.log(state);\r\n    return {\r\n        state : state.reducer,\r\n        alertOpen : state.reducer2\r\n    }\r\n}\r\n\r\n\r\n  // state를 props화 해주는 것을 써줘야 됨!!그래야 dispatch도 사용 가능\r\n  export default connect(hamsu)(Detail)\r\n\r\n  // export default Detail;"],"names":["박스","styled","제목","props","색상","TabContent","useEffect","스위치클릭","tab","Info","재고","connect","state","console","log","reducer","alertOpen","reducer2","useState","alert","alert변경","useContext","재고context","setTab","스위치","setTimeout","id","useParams","상품상세","shoes","find","상품","history","useHistory","className","src","width","title","content","price","onClick","dispatch","type","payload","name","quan","push","goBack","Nav","variant","defaultActiveKey","eventKey","CSSTransition","in","classNames","timeout"],"sourceRoot":""}